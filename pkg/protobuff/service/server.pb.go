// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service/server.proto

package service

import (
	auth "authservice/pkg/protobuff/api/auth"
	user "authservice/pkg/protobuff/api/user"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c15ebb5135914b1, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Empty)(nil), "authservice.service.Empty")
}

func init() { proto.RegisterFile("service/server.proto", fileDescriptor_0c15ebb5135914b1) }

var fileDescriptor_0c15ebb5135914b1 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x07, 0xd1, 0xa9, 0x45, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xc2,
	0x89, 0xa5, 0x25, 0x19, 0x50, 0x19, 0x3d, 0x28, 0x2d, 0x25, 0x9c, 0x58, 0x90, 0xa9, 0x0f, 0x92,
	0x00, 0x13, 0x10, 0x95, 0x10, 0xc1, 0xd2, 0xe2, 0xd4, 0x22, 0x30, 0x01, 0x11, 0x54, 0x62, 0xe7,
	0x62, 0x75, 0xcd, 0x2d, 0x28, 0xa9, 0x34, 0x6a, 0x66, 0xe6, 0x62, 0x71, 0x2c, 0x2d, 0xc9, 0x10,
	0xb2, 0xe3, 0x62, 0x09, 0xc8, 0xcc, 0x4b, 0x17, 0x92, 0xd2, 0xc3, 0x62, 0xb2, 0x1e, 0x58, 0xb1,
	0x14, 0x1e, 0x39, 0x21, 0x37, 0x2e, 0x56, 0x9f, 0xfc, 0xf4, 0xcc, 0x3c, 0x21, 0x59, 0x14, 0x45,
	0x60, 0x87, 0x80, 0x2c, 0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x91, 0x92, 0xc3, 0x25, 0x5d,
	0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0xe4, 0xcb, 0xc5, 0x16, 0x9c, 0x99, 0x9e, 0x17, 0x5a, 0x20,
	0xa4, 0x8c, 0xa2, 0x12, 0xec, 0x78, 0xe7, 0xa2, 0xd4, 0xc4, 0x92, 0xd4, 0xd0, 0xe2, 0xd4, 0x22,
	0x62, 0x8d, 0xf3, 0xe6, 0xe2, 0x73, 0x4f, 0x2d, 0x01, 0xe9, 0x70, 0x49, 0x2d, 0x49, 0xcc, 0xcc,
	0x29, 0xc6, 0xeb, 0x41, 0x59, 0x4c, 0x2b, 0x91, 0xb5, 0x86, 0x73, 0x09, 0x86, 0x16, 0xa4, 0x40,
	0x5d, 0x00, 0x13, 0xc4, 0xe2, 0x4c, 0x84, 0x22, 0x98, 0x33, 0xf1, 0x1b, 0xec, 0x24, 0x1a, 0x85,
	0x1c, 0x9f, 0xfa, 0x50, 0x3a, 0x89, 0x0d, 0x1c, 0x59, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x4e, 0x11, 0x8c, 0x2f, 0x03, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// RPC related to Authentication
	Login(ctx context.Context, in *auth.AuthRequest, opts ...grpc.CallOption) (*auth.AuthResponse, error)
	SignUp(ctx context.Context, in *user.CreateUserRequest, opts ...grpc.CallOption) (*auth.AuthResponse, error)
	GetUserDetails(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*user.UserDetails, error)
	UpdateUserDetails(ctx context.Context, in *user.UpdateUserRequest, opts ...grpc.CallOption) (*user.UserDetails, error)
}

type authClient struct {
	cc *grpc.ClientConn
}

func NewAuthClient(cc *grpc.ClientConn) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/authservice.service.Auth/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Login(ctx context.Context, in *auth.AuthRequest, opts ...grpc.CallOption) (*auth.AuthResponse, error) {
	out := new(auth.AuthResponse)
	err := c.cc.Invoke(ctx, "/authservice.service.Auth/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SignUp(ctx context.Context, in *user.CreateUserRequest, opts ...grpc.CallOption) (*auth.AuthResponse, error) {
	out := new(auth.AuthResponse)
	err := c.cc.Invoke(ctx, "/authservice.service.Auth/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserDetails(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*user.UserDetails, error) {
	out := new(user.UserDetails)
	err := c.cc.Invoke(ctx, "/authservice.service.Auth/GetUserDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateUserDetails(ctx context.Context, in *user.UpdateUserRequest, opts ...grpc.CallOption) (*user.UserDetails, error) {
	out := new(user.UserDetails)
	err := c.cc.Invoke(ctx, "/authservice.service.Auth/UpdateUserDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
type AuthServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	// RPC related to Authentication
	Login(context.Context, *auth.AuthRequest) (*auth.AuthResponse, error)
	SignUp(context.Context, *user.CreateUserRequest) (*auth.AuthResponse, error)
	GetUserDetails(context.Context, *Empty) (*user.UserDetails, error)
	UpdateUserDetails(context.Context, *user.UpdateUserRequest) (*user.UserDetails, error)
}

// UnimplementedAuthServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (*UnimplementedAuthServer) Ping(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedAuthServer) Login(ctx context.Context, req *auth.AuthRequest) (*auth.AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedAuthServer) SignUp(ctx context.Context, req *user.CreateUserRequest) (*auth.AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (*UnimplementedAuthServer) GetUserDetails(ctx context.Context, req *Empty) (*user.UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDetails not implemented")
}
func (*UnimplementedAuthServer) UpdateUserDetails(ctx context.Context, req *user.UpdateUserRequest) (*user.UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDetails not implemented")
}

func RegisterAuthServer(s *grpc.Server, srv AuthServer) {
	s.RegisterService(&_Auth_serviceDesc, srv)
}

func _Auth_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.service.Auth/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.service.Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*auth.AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.service.Auth/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignUp(ctx, req.(*user.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.service.Auth/GetUserDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserDetails(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authservice.service.Auth/UpdateUserDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateUserDetails(ctx, req.(*user.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Auth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "authservice.service.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Auth_Ping_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Auth_SignUp_Handler,
		},
		{
			MethodName: "GetUserDetails",
			Handler:    _Auth_GetUserDetails_Handler,
		},
		{
			MethodName: "UpdateUserDetails",
			Handler:    _Auth_UpdateUserDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/server.proto",
}
